# -*- coding: utf-8 -*-
"""K-means_Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z1_O_tQ5gXwB86iNtZS9vpAVOMh3kHWI
"""

import numpy as np
import pandas as pd
import statsmodels.api as sm
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()
from sklearn.cluster import k_means

data = pd.read_csv('kc_house_data.csv')
data

print(data.head())

plt.scatter(data['price'],data['sqft_lot'])
plt.xlim(0,5000000)
plt.ylim(0,1000000)
plt.show()

from numpy.lib.function_base import average
x = data.iloc[:,[2,6]]
x

#average(data.iloc[:,[6]])

WCSS=[]
for i in range(1,10):
  k_means = KMeans(i)
  k_means.fit(x)
  wcss_iterationation = k_means.inertia_
  WCSS.append(wcss_iterationation)

k_clusters = range(1,10)
plt.plot(k_clusters,WCSS)
plt.title('The Elbow Method Graph')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')

k_means = KMeans(4)
clusters_determined = k_means.fit_predict(x)
data_copy = data.copy()
data_copy['Clusters'] = clusters_determined 
plt.scatter(data_copy['price'],data_copy['sqft_lot'],c=data_copy['Clusters'],cmap='BuGn')

k_means = KMeans(n_clusters = 4, init = "k-means++", random_state = 42)
y_val_kmeans = k_means.fit_predict(x)

y_val_kmeans

x = np.array(x)

plt.scatter(x[y_val_kmeans == 0, 0], x[y_val_kmeans == 0, 1], s = 60, c = 'red', label = 'Cluster1')
plt.scatter(x[y_val_kmeans == 1, 0], x[y_val_kmeans == 1, 1], s = 60, c = 'blue', label = 'Cluster2')
plt.scatter(x[y_val_kmeans == 2, 0], x[y_val_kmeans == 2, 1], s = 60, c = 'green', label = 'Cluster3')
plt.scatter(x[y_val_kmeans == 3, 0], x[y_val_kmeans == 3, 1], s = 60, c = 'violet', label = 'Cluster4')
plt.scatter(k_means.cluster_centers_[:, 0], k_means.cluster_centers_[:, 1], s = 150, c = 'black', label = 'Centroids')
plt.xlabel('Price') 
plt.ylabel('Sqft_Lot') 
plt.legend()

y = data.iloc[:,[2,3]]
y

WCSS=[]
for i in range(1,10):
  k_means = k_means(i)
  k_means.fit(y)
  wcss_iteration = k_means.inertia_
  WCSS.append(wcss_iteration)

k_clusters = range(1,10)
plt.plot(k_clusters,WCSS)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')

k_means = KMeans(4)
clusters_determined = k_means.fit_predict(y)
clusters_determined
data_copy = data.copy()
data_copy['Clusters'] = clusters_determined 
plt.scatter(data_copy['price'],data_copy['bedrooms'],c=data_copy['Clusters'],cmap='RdGy')

y = np.array(y)

plt.scatter(y[y_val_kmeans == 0, 0], y[y_val_kmeans == 0, 1], s = 60, c = 'red', label = 'Cluster1')
plt.scatter(y[y_val_kmeans == 1, 0], y[y_val_kmeans == 1, 1], s = 60, c = 'blue', label = 'Cluster2')
plt.scatter(y[y_val_kmeans == 2, 0], y[y_val_kmeans == 2, 1], s = 60, c = 'green', label = 'Cluster3')
plt.scatter(k_means.cluster_centers_[:, 0], k_means.cluster_centers_[:, 1], s = 100, c = 'black', label = 'Centroids')
plt.xlabel('Price') 
plt.ylabel('Number of Bedrooms') 
plt.xlim(0,5000000)
plt.ylim(0,15)
plt.legend()

z = data.iloc[:,[2,4]]
z

k_means = KMeans(3)
clusters_determined = k_means.fit_predict(y)
clusters_determined
data_copy = data.copy()
data_copy['Clusters'] = clusters_determined 
plt.scatter(data_copy['price'],data_copy['bathrooms'],c=data_copy['Clusters'],cmap='PuBu')

WCSS=[]
for i in range(1,10):
  k_means = KMeans(i)
  k_means.fit(z)
  wcss_iteration = k_means.inertia_
  WCSS.append(wcss_iteration)

k_clusters = range(1,10)
plt.plot(k_clusters,WCSS)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')

k_means = KMeans(n_clusters = 4, init = "k-means++", random_state = 42)
y_val_kmeans = k_means.fit_predict(z)

y_val_kmeans

z = np.array(z)

plt.scatter(z[y_val_kmeans == 0, 0], z[y_val_kmeans == 0, 1], s = 60, c = 'red', label = 'Cluster1')
plt.scatter(z[y_val_kmeans == 1, 0], z[y_val_kmeans == 1, 1], s = 60, c = 'blue', label = 'Cluster2')
plt.scatter(z[y_val_kmeans == 2, 0], z[y_val_kmeans == 2, 1], s = 60, c = 'green', label = 'Cluster3')
plt.scatter(k_means.cluster_centers_[:, 0], k_means.cluster_centers_[:, 1], s = 100, c = 'black', label = 'Centroids')
plt.xlabel('Price') 
plt.ylabel('Number of Bathooms') 
plt.xlim(0,5000000)
plt.ylim(0,10)
plt.legend()

b = data.iloc[:,[2,14]]
b


WCSS=[]
for i in range(1,10):
  k_means = KMeans(i)
  k_means.fit(b)
  wcss_iteration = k_means.inertia_
  WCSS.append(wcss_iteration)

k_clusters = range(1,10)
plt.plot(k_clusters,WCSS)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')

k_means = KMeans(3)
clusters_determined = k_means.fit_predict(b)
clusters_determined
data_copy = data.copy()
data_copy['Clusters'] = clusters_determined 
plt.scatter(data_copy['price'],data_copy['yr_renovated'],c=data_copy['Clusters'],cmap='BuGn')

k_means = KMeans(n_clusters = 3, init = "k-means++", random_state = 42)
y_val_kmeans = k_means.fit_predict(b)

y_val_kmeans

b = np.array(b)

plt.scatter(b[y_val_kmeans == 0, 0], b[y_val_kmeans == 0, 1], s = 60, c = 'red', label = 'Cluster1')
plt.scatter(b[y_val_kmeans == 1, 0], b[y_val_kmeans == 1, 1], s = 60, c = 'blue', label = 'Cluster2')
plt.scatter(b[y_val_kmeans == 2, 0], b[y_val_kmeans == 2, 1], s = 60, c = 'green', label = 'Cluster3')
plt.scatter(k_means.cluster_centers_[:, 0], k_means.cluster_centers_[:, 1], s = 100, c = 'black', label = 'Centroids')
plt.xlabel('Price') 
plt.ylabel('Year Renovated') 
plt.xlim(0,5000000)
plt.ylim(1800,2100)
plt.legend()

n = data.iloc[:,[2,18]]
n


WCSS=[]
for i in range(1,10):
  k_means = KMeans(i)
  k_means.fit(n)
  wcss_iteration = k_means.inertia_
  WCSS.append(wcss_iteration)

k_clusters = range(1,10)
plt.plot(k_clusters,WCSS)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')

k_means = KMeans(3)
clusters_determined = k_means.fit_predict(n)
clusters_determined
data_copy = data.copy()
data_copy['Clusters'] = clusters_determined 
plt.scatter(data_copy['price'],data_copy['sqft_living15'],c=data_copy['Clusters'],cmap='RdGy')

k_means = KMeans(n_clusters = 3, init = "k-means++", random_state = 42)
y_val_kmeans = k_means.fit_predict(n)

y_val_kmeans

n = np.array(n)

plt.scatter(n[y_val_kmeans == 0, 0], n[y_val_kmeans == 0, 1], s = 60, c = 'red', label = 'Cluster1')
plt.scatter(n[y_val_kmeans == 1, 0], n[y_val_kmeans == 1, 1], s = 60, c = 'blue', label = 'Cluster2')
plt.scatter(n[y_val_kmeans == 2, 0], n[y_val_kmeans == 2, 1], s = 60, c = 'green', label = 'Cluster3')
plt.scatter(k_means.cluster_centers_[:, 0], k_means.cluster_centers_[:, 1], s = 100, c = 'black', label = 'Centroids')
plt.xlabel('Price') 
plt.ylabel('Sqft Living') 
plt.xlim(0,5000000)
plt.ylim(-2000,6000)
plt.legend()